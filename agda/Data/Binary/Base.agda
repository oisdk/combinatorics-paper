{-# OPTIONS --cubical --safe #-}

module Data.Binary.Base where

open import Prelude
import Data.Nat as โ

infixr 5 1แตโท_ 2แตโท_
data ๐น : Typeโ where
  [] : ๐น
  1แตโท_ : ๐น โ ๐น
  2แตโท_ : ๐น โ ๐น

inc : ๐น โ ๐น
inc [] = 1แตโท []
inc (1แตโท xs) = 2แตโท xs
inc (2แตโท xs) = 1แตโท inc xs

โฆ_โโง : โ โ ๐น
โฆ zero  โโง = []
โฆ suc n โโง = inc โฆ n โโง

open import Literals.Number
open import Data.Unit
open import Data.Nat.Literals

instance
  numberBin : Number ๐น
  Number.Constraint numberBin = ฮป _ โ โค
  Number.fromNat numberBin = ฮป n โ โฆ n โโง

โฆ_โโง : ๐น โ โ
โฆ [] โโง = 0
โฆ 1แตโท xs โโง = 1 โ.+ โฆ xs โโง โ.* 2
โฆ 2แตโท xs โโง = 2 โ.+ โฆ xs โโง โ.* 2

addโ : ๐น โ ๐น โ ๐น
addโ : ๐น โ ๐น โ ๐น

addโ [] ys = inc ys
addโ xs [] = inc xs
addโ (1แตโท xs) (1แตโท ys) = 1แตโท addโ xs ys
addโ (1แตโท xs) (2แตโท ys) = 2แตโท addโ xs ys
addโ (2แตโท xs) (1แตโท ys) = 2แตโท addโ xs ys
addโ (2แตโท xs) (2แตโท ys) = 1แตโท addโ xs ys

addโ [] [] = 2แตโท []
addโ [] (1แตโท ys) = 1แตโท inc ys
addโ [] (2แตโท ys) = 2แตโท inc ys
addโ (1แตโท xs) [] = 1แตโท inc xs
addโ (2แตโท xs) [] = 2แตโท inc xs
addโ (1แตโท xs) (1แตโท ys) = 2แตโท addโ xs ys
addโ (1แตโท xs) (2แตโท ys) = 1แตโท addโ xs ys
addโ (2แตโท xs) (1แตโท ys) = 1แตโท addโ xs ys
addโ (2แตโท xs) (2แตโท ys) = 2แตโท addโ xs ys

infixl 6 _+_
_+_ : ๐น โ ๐น โ ๐น
[] + ys = ys
xs + [] = xs
(1แตโท xs) + (1แตโท ys) = 2แตโท xs + ys
(1แตโท xs) + (2แตโท ys) = 1แตโท addโ xs ys
(2แตโท xs) + (1แตโท ys) = 1แตโท addโ xs ys
(2แตโท xs) + (2แตโท ys) = 2แตโท addโ xs ys

double : ๐น โ ๐น
double [] = []
double (1แตโท xs) = 2แตโท double xs
double (2แตโท xs) = 2แตโท 1แตโท xs

infixl 7 _*_
_*_ : ๐น โ ๐น โ ๐น
xs * [] = []
xs * (1แตโท ys) = go xs
  where
  go : ๐น โ ๐น
  go [] = []
  go (1แตโท xs) = 1แตโท ys + go xs
  go (2แตโท xs) = 2แตโท double ys + go xs
xs * (2แตโท ys) = go xs
  where
  go : ๐น โ ๐น
  go [] = []
  go (1แตโท xs) = 2แตโท ys + go xs
  go (2แตโท xs) = 2แตโท (1แตโท ys) + go xs

mutual
  decโฒ : ๐น โ ๐น
  decโฒ [] = []
  decโฒ (1แตโท xs) = 2แตโท decโฒ xs
  decโฒ (2แตโท xs) = 2แตโท 1แตโท xs

  dec : ๐น โ ๐น
  dec [] = []
  dec (2แตโท xs) = 1แตโท xs
  dec (1แตโท xs) = decโฒ xs

-- testers : โ โ โ โ Typeโ
-- testers n m = bins n m โก nats n m
--   where
--   open import Data.List
--   open import Data.List.Syntax
--   open import Data.List.Sugar
--   import Agda.Builtin.Nat as Nat

--   upTo : (โ โ A) โ โ โ List A
--   upTo f zero = []
--   upTo f (suc n) = f zero List.โท upTo (f โ suc) n

--   bins : โ โ โ โ List โ
--   bins ns ms = do
--     n โ upTo id ns
--     m โ upTo id ms
--     pure โฆ โฆ n โโง - โฆ m โโง โโง

--   nats : โ โ โ โ List โ
--   nats ns ms = do
--     n โ upTo id ns
--     m โ upTo id ms
--     pure (n Nat.- m)

-- ex = โฆ 4 โโง

-- -- ex :  โฆ 5 โโง - โฆ 4 โโง  โก โฆ 1 โโง
-- -- ex = refl


-- -- _ : testers 5 5
-- -- _ = refl
