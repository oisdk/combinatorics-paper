\begin{code}
{-# OPTIONS --cubical --safe #-}

module Data.Binary.Zeroless where

open import Prelude hiding (Bool; true; false)
open import Data.List.Kleene.AsList as List using (List; _โท_; []; foldr)
open import Data.List.Kleene using (_โบ; โน_; _&_)
open import Data.Bool as Bool
  using (boolโฒ)
  renaming (Bool to Bit; true to 2แต; false to 1แต)
  public
import Data.Nat as โ

๐น : Typeโ
๐น = List Bit

๐นโบ : Typeโ
๐นโบ = Bit โบ

mutual
  incโบ : ๐น โ ๐นโบ
  incโบ []        = 1แต & []
  incโบ (1แต โท xs) = 2แต & xs
  incโบ (2แต โท xs) = 1แต & inc xs

  inc : ๐น โ ๐น
  inc xs = โน incโบ xs

dec : ๐นโบ โ ๐น
dec (2แต & xs) = 1แต โท xs
dec (1แต & []) = []
dec (1แต & โน xs) = 2แต โท dec xs

decโฒ : ๐น โ ๐น
decโฒ [] = []
decโฒ (โน xs) = dec xs

incโdec : โ ns โ incโบ (dec ns) โก ns
incโdec (2แต & ns) = refl
incโdec (1แต & []) = refl
incโdec (1แต & โน xs) = cong (ฮป ys โ 1แต & โน ys) (incโdec xs)

decโinc : โ ns โ dec (incโบ ns) โก ns
decโinc [] = refl
decโinc (1แต โท xs) = refl
decโinc (2แต โท xs) = cong (2แต โท_) (decโinc xs)

-- Same as:
-- 2* zero = zero
-- 2* (suc n) = suc (suc (2* n))
2* : โ โ โ
2* = โ._* 2

_โทโ_ : Bit โ โ โ โ
x โทโ xs = suc (boolโฒ id suc x (2* xs))

โฆ_โโง : ๐น โ โ
โฆ_โโง = foldr _โทโ_ zero

โฆ_โโง : โ โ ๐น
โฆ zero  โโง = []
โฆ suc n โโง = inc โฆ n โโง

2*โ1แตโท : โ n โ inc โฆ 2* n โโง โก 1แต โท โฆ n โโง
2*โ1แตโท zero    = refl
2*โ1แตโท (suc n) = cong (inc โ inc) (2*โ1แตโท n)

๐นโโโ๐น : โ n โ โฆ โฆ n โโง โโง โก n
๐นโโโ๐น [] = refl
๐นโโโ๐น (1แต โท xs) =           2*โ1แตโท โฆ xs โโง  อพ cong (1แต โท_) (๐นโโโ๐น xs)
๐นโโโ๐น (2แต โท xs) = cong inc (2*โ1แตโท โฆ xs โโง) อพ cong (2แต โท_) (๐นโโโ๐น xs)

incโsuc : โ n โ โฆ inc n โโง โก suc โฆ n โโง
incโsuc [] = refl
incโsuc (1แต โท xs) = refl
incโsuc (2แต โท xs) = cong (suc โ 2*) (incโsuc xs)

โโ๐นโโ : โ n โ โฆ โฆ n โโง โโง โก n
โโ๐นโโ zero = refl
โโ๐นโโ (suc n) = incโsuc โฆ n โโง อพ cong suc (โโ๐นโโ n)

๐นโโ : ๐น โ โ
๐นโโ = iso โฆ_โโง โฆ_โโง โโ๐นโโ ๐นโโโ๐น

infixl 6 _+_ _+โ_ _+โ_

_+โ_ _+โ_ : ๐น โ ๐น โ ๐นโบ

[]        +โ ys        = incโบ ys
(โน xs)    +โ []        = incโบ (โน xs)
(1แต โท xs) +โ (1แต โท ys) = 1แต & โน xs +โ ys
(1แต โท xs) +โ (2แต โท ys) = 2แต & โน xs +โ ys
(2แต โท xs) +โ (1แต โท ys) = 2แต & โน xs +โ ys
(2แต โท xs) +โ (2แต โท ys) = 1แต & โน xs +โ ys

[]        +โ []        = 2แต & []
[]        +โ (y  โท ys) = y & inc ys
(x  โท xs) +โ []        = x & inc xs
(1แต โท xs) +โ (1แต โท ys) = 2แต & โน xs +โ ys
(1แต โท xs) +โ (2แต โท ys) = 1แต & โน xs +โ ys
(2แต โท xs) +โ (1แต โท ys) = 1แต & โน xs +โ ys
(2แต โท xs) +โ (2แต โท ys) = 2แต & โน xs +โ ys

_+_ : ๐น โ ๐น โ ๐น
[]        + ys        = ys
(โน xs)    + []        = โน xs
(1แต โท xs) + (1แต โท ys) = 2แต โท   xs +  ys
(1แต โท xs) + (2แต โท ys) = 1แต โท โน xs +โ ys
(2แต โท xs) + (1แต โท ys) = 1แต โท โน xs +โ ys
(2แต โท xs) + (2แต โท ys) = 2แต โท โน xs +โ ys
\end{code}
