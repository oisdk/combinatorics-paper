\begin{code}
{-# OPTIONS --cubical --postfix-projections --safe #-}

module Countdown where

open import Prelude hiding (C)
open import Data.List
open import Data.Fin

open import Literals.Number
open import Data.Nat.Literals
open import Data.Fin.Literals
open import Data.Nat using (_+_; _*_)
open import Data.Nat.Properties using (pred; _<_)
open import Data.Fin.Properties using (FinTo‚Ñï)
open import Agda.Builtin.Nat using (_-_; _==_; div-helper)
open import Dyck
open import Data.Vec.Iterated

\end{code}
%<*ops-def>
\begin{code}
data Op : Type‚ÇÄ where
  +‚Ä≤ √ó‚Ä≤ -‚Ä≤ √∑‚Ä≤ : Op
\end{code}
%</ops-def>
\begin{code}
private
  variable
    n m k : ‚Ñï

Subseq : ‚Ñï ‚Üí Type‚ÇÄ
Subseq = Vec Bool

private
  module WrongPerm where
\end{code}
%<*wrong-perm>
\begin{code}
    Perm : ‚Ñï ‚Üí Type‚ÇÄ
    Perm n = Fin n ‚Üí Fin n
\end{code}
%</wrong-perm>
\begin{code}
private
  module IsoPerm where
\end{code}
%<*isomorphism>
\begin{code}
    Isomorphism : Type a ‚Üí Type b ‚Üí Type (a ‚Ñì‚äî b)
    Isomorphism A B = Œ£[ f ‚¶Ç (A ‚Üí B) ] Œ£[ g ‚¶Ç (B ‚Üí A) ] (f ‚àò g ‚â° id) √ó (g ‚àò f ‚â° id)
\end{code}
%</isomorphism>
%<*iso-perm>
\begin{code}
    Perm : ‚Ñï ‚Üí Type‚ÇÄ
    Perm n = Isomorphism (Fin n) (Fin n)
\end{code}
%</iso-perm>
%<*perm-def>
\begin{code}
Perm : ‚Ñï ‚Üí Type‚ÇÄ
Perm zero     = ‚ä§
Perm (suc n)  = Fin (suc n) √ó Perm n
\end{code}
%</perm-def>
\begin{code}

private
  variable ns : List ‚Ñï

count : Subseq n ‚Üí ‚Ñï
count = foldr‚Ä≤ (Œª x xs ‚Üí bool 0 1 x + xs) 0

Comb : ‚Ñï ‚Üí Type‚ÇÄ
Comb n = Œ£[ s ‚¶Ç Subseq n ] Perm (count s)

\end{code}
%<*expr-def>
\begin{code}
ExprTree : ‚Ñï ‚Üí Type‚ÇÄ
ExprTree zero     = ‚ä•
ExprTree (suc n)  = Dyck 0 n √ó Vec Op n

Expr : List ‚Ñï ‚Üí Type‚ÇÄ
Expr ns = Œ£[ s ‚¶Ç Subseq (length ns) ] let m = count s in Perm m √ó ExprTree m
\end{code}
%</expr-def>
\begin{code}

-- Œ£[ c ‚¶Ç Comb (length ns) ] (ExprTree (count (fst c)))


open import Cardinality.Finite.SplitEnumerable
open import Cardinality.Finite.SplitEnumerable.Inductive
open import Cardinality.Finite.SplitEnumerable.Isomorphism
open import Function.Surjective.Properties

private
  module OpSlop where
\end{code}
%<*op-slop>
\begin{code}
    ‚Ñ∞!‚ü®Op‚ü© : ‚Ñ∞! Op
    ‚Ñ∞!‚ü®Op‚ü© .fst = +‚Ä≤ ‚à∑ +‚Ä≤ ‚à∑ √ó‚Ä≤ ‚à∑ -‚Ä≤ ‚à∑ √∑‚Ä≤ ‚à∑ []
    ‚Ñ∞!‚ü®Op‚ü© .snd +‚Ä≤  = 0 , refl
    ‚Ñ∞!‚ü®Op‚ü© .snd √ó‚Ä≤  = 2 , refl
    ‚Ñ∞!‚ü®Op‚ü© .snd -‚Ä≤  = 3 , refl
    ‚Ñ∞!‚ü®Op‚ü© .snd √∑‚Ä≤  = 4 , refl
\end{code}
%</op-slop>
\begin{code}
‚Ñ∞!‚ü®Fin‚ü© : ‚Ñ∞! (Fin n)
‚Ñ∞!‚ü®Fin‚ü© = ùïÉ‚áî‚Ñí‚ü®‚Ñ∞!‚ü© .inv (‚Ñ∞!‚áîFin‚Ü†! .inv (_ , ‚Ü†!-ident))

import Data.Unit.UniversePolymorphic as Poly

‚Ñ∞!‚ü®Poly‚ä§‚ü© : ‚àÄ {‚Ñì} ‚Üí ‚Ñ∞! (Poly.‚ä§ {‚Ñì})
‚Ñ∞!‚ü®Poly‚ä§‚ü© .fst = _ ‚à∑ []
‚Ñ∞!‚ü®Poly‚ä§‚ü© .snd _ = f0 , refl

\end{code}
%<*vec-fin>
\begin{code}
‚Ñ∞!‚ü®Vec‚ü© : ‚Ñ∞! A ‚Üí ‚Ñ∞! (Vec A n)
‚Ñ∞!‚ü®Vec‚ü© {n = zero   } ‚Ñ∞!‚ü®A‚ü© = ‚Ñ∞!‚ü®Poly‚ä§‚ü©
‚Ñ∞!‚ü®Vec‚ü© {n = suc n  } ‚Ñ∞!‚ü®A‚ü© = ‚Ñ∞!‚ü®A‚ü© |√ó| ‚Ñ∞!‚ü®Vec‚ü© ‚Ñ∞!‚ü®A‚ü©
\end{code}
%</vec-fin>
\begin{code}
‚Ñ∞!‚ü®Subseq‚ü© : ‚Ñ∞! (Subseq n)
‚Ñ∞!‚ü®Subseq‚ü© = ‚Ñ∞!‚ü®Vec‚ü© ‚Ñ∞!‚ü®2‚ü©
\end{code}
%<*perm-fin>
\begin{code}
‚Ñ∞!‚ü®Perm‚ü© : ‚Ñ∞! (Perm n)
‚Ñ∞!‚ü®Perm‚ü© {n = zero   } = ‚Ñ∞!‚ü®‚ä§‚ü©
‚Ñ∞!‚ü®Perm‚ü© {n = suc n  } = ‚Ñ∞!‚ü®Fin‚ü© |√ó| ‚Ñ∞!‚ü®Perm‚ü©
\end{code}
%</perm-fin>
%<*op-fin>
\begin{code}
‚Ñ∞!‚ü®Op‚ü© : ‚Ñ∞! Op
‚Ñ∞!‚ü®Op‚ü© .fst = +‚Ä≤ ‚à∑ √ó‚Ä≤ ‚à∑ -‚Ä≤ ‚à∑ √∑‚Ä≤ ‚à∑ []
‚Ñ∞!‚ü®Op‚ü© .snd +‚Ä≤  = 0 , refl
‚Ñ∞!‚ü®Op‚ü© .snd √ó‚Ä≤  = 1 , refl
‚Ñ∞!‚ü®Op‚ü© .snd -‚Ä≤  = 2 , refl
‚Ñ∞!‚ü®Op‚ü© .snd √∑‚Ä≤  = 3 , refl
\end{code}
%</op-fin>
\begin{code}


runSubseq : (xs : List A) ‚Üí (ys : Subseq (length xs)) ‚Üí Vec A (count ys)
runSubseq []       ys = _
runSubseq (x ‚à∑ xs) (false , snd‚ÇÅ) = runSubseq xs snd‚ÇÅ
runSubseq (x ‚à∑ xs) (true , snd‚ÇÅ) = x , runSubseq xs snd‚ÇÅ

insert : A ‚Üí Fin (suc n) ‚Üí Vec A n ‚Üí Vec A (suc n)
insert x f0 xs = x , xs
insert {n = suc _} x (fs i) (x‚ÇÇ , xs) = x‚ÇÇ , insert x i xs

runPerm : Perm n ‚Üí Vec A n ‚Üí Vec A n
runPerm {n = zero} ps _ = _
runPerm {n = suc n} (fst‚ÇÅ , snd‚ÇÅ) (x , xs) = insert x fst‚ÇÅ (runPerm snd‚ÇÅ xs)

runComb : (xs : List A) ‚Üí (c : Comb (length xs)) ‚Üí Vec A (count (c .fst))
runComb xs (-‚Ä≤s , perm) = runPerm perm (runSubseq xs -‚Ä≤s)

\end{code}
%<*expr-finite>
\begin{code}
‚Ñ∞!‚ü®ExprTree‚ü© : ‚Ñ∞! (ExprTree n)
‚Ñ∞!‚ü®ExprTree‚ü© {n = zero } = ‚Ñ∞!‚ü®‚ä•‚ü©
‚Ñ∞!‚ü®ExprTree‚ü© {n = suc n} = ‚Ñ∞!‚ü®Dyck‚ü© |√ó| ‚Ñ∞!‚ü®Vec‚ü© ‚Ñ∞!‚ü®Op‚ü©

‚Ñ∞!‚ü®Expr‚ü© : ‚Ñ∞! (Expr ns)
‚Ñ∞!‚ü®Expr‚ü© = ‚Ñ∞!‚ü®Subseq‚ü© |Œ£| Œª _ ‚Üí ‚Ñ∞!‚ü®Perm‚ü© |√ó| ‚Ñ∞!‚ü®ExprTree‚ü©
\end{code}
%</expr-finite>
\begin{code}

buildExpr : (xs : List ‚Ñï) ‚Üí Expr xs ‚Üí Tree Op ‚Ñï
buildExpr xs (subseq , rest) with count subseq | runSubseq xs subseq
buildExpr xs (subseq , (perm , tree , ops)) | suc n | ys = fromDyck tree ops (runPerm perm ys)


√∑‚Ä≤‚Ä≤ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
√∑‚Ä≤‚Ä≤ m zero = zero
√∑‚Ä≤‚Ä≤ m (suc n) = div-helper 0 m n m

appOneOp : Op ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
appOneOp +‚Ä≤ = _+_
appOneOp √ó‚Ä≤ = _*_
appOneOp -‚Ä≤ = _-_
appOneOp √∑‚Ä≤ = √∑‚Ä≤‚Ä≤

runTree : Tree Op ‚Ñï ‚Üí ‚Ñï
runTree (leaf x) = x
runTree (node o xs ys) = appOneOp o (runTree xs) (runTree ys)

data Disp : Type‚ÇÄ where
  lit : ‚Ñï ‚Üí Disp
  _‚ü®+‚ü©_ : Disp ‚Üí Disp ‚Üí Disp
  _‚ü®*‚ü©_ : Disp ‚Üí Disp ‚Üí Disp
  _‚ü®-‚ü©_ : Disp ‚Üí Disp ‚Üí Disp
  _‚ü®√∑‚ü©_ : Disp ‚Üí Disp ‚Üí Disp

appDispOp : Op ‚Üí Disp ‚Üí Disp ‚Üí Disp
appDispOp +‚Ä≤  = _‚ü®+‚ü©_
appDispOp √ó‚Ä≤ = _‚ü®*‚ü©_
appDispOp -‚Ä≤   = _‚ü®-‚ü©_
appDispOp √∑‚Ä≤   = _‚ü®√∑‚ü©_

open import Agda.Builtin.Strict

infixr 0 _$!_
_$!_ : ‚àÄ {a b} {A : Set a} {B : A ‚Üí Set b} ‚Üí (‚àÄ x ‚Üí B x) ‚Üí ‚àÄ x ‚Üí B x
f $! x = primForce x f

dispTree : Tree Op ‚Ñï ‚Üí Disp
dispTree (leaf x) = lit x
dispTree (node o xs ys) = (appDispOp o $! dispTree xs) $! dispTree ys

take : ‚Ñï ‚Üí List A ‚Üí List A
take zero _ = []
take (suc n) [] = []
take (suc n) (x ‚à∑ xs) = x ‚à∑ take n xs

filter : (A ‚Üí Bool) ‚Üí List A ‚Üí List A
filter p [] = []
filter p (x ‚à∑ xs) = if p x then x ‚à∑ filter p xs else filter p xs

example : List Disp
example = map dispTree (take 1 (filter (Œª e ‚Üí runTree e == 765) (map (buildExpr nums) (‚Ñ∞!‚ü®Expr‚ü© {ns = nums} .fst))))
  where
  nums = (1 ‚à∑ 3 ‚à∑ 7 ‚à∑ 10 ‚à∑ 25 ‚à∑ 50 ‚à∑ [])

-- Uncomment for a type error which contains the answer
-- prf : example ‚â° (lit 0 ‚à∑ [])
-- prf = refl
\end{code}
