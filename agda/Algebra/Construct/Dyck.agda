{-# OPTIONS --cubical --safe #-}

module Algebra.Construct.Dyck where

open import Prelude
open import Algebra
open import Data.Nat using (_+_)
import Data.Nat.Properties as ‚Ñï
open import Agda.Builtin.Nat using (_-_)

record Bal : Type‚ÇÄ where
  constructor _‚ü©‚ü®_
  field
    left  : ‚Ñï
    right : ‚Ñï
open Bal public

infix 4.5 _‚ü©-‚ü®_ _‚ü©‚ü®_ _+‚ü®_‚ü©+_ _+‚ü®‚ü©+_

_‚ü©-‚ü®_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Bal
zero  ‚ü©-‚ü® m     = zero  ‚ü©‚ü® m
suc n ‚ü©-‚ü® zero  = suc n ‚ü©‚ü® zero
suc n ‚ü©-‚ü® suc m = n ‚ü©-‚ü® m

_+‚ü®_‚ü©+_ : ‚Ñï ‚Üí Bal ‚Üí ‚Ñï ‚Üí Bal
left  (x +‚ü® z ‚ü©+ y) = right z + x
right (x +‚ü® z ‚ü©+ y) = left z  + y

_+‚ü®‚ü©+_ : Bal ‚Üí Bal ‚Üí Bal
x +‚ü®‚ü©+ y = left x +‚ü® right x ‚ü©-‚ü® left y ‚ü©+ right y

mempty : Bal
left  mempty = 0
right mempty = 0

diff-zero ≥ : ‚àÄ n ‚Üí n ‚ü©-‚ü® zero ‚â° n ‚ü©‚ü® zero
diff-zero ≥ zero    = refl
diff-zero ≥ (suc n) = refl

invert : Bal ‚Üí Bal
left  (invert x) = right x
right (invert x) = left  x

neg-inv : ‚àÄ x y ‚Üí invert (x ‚ü©-‚ü® y) ‚â° y ‚ü©-‚ü® x
neg-inv zero  zero = refl
neg-inv zero (suc y) = refl
neg-inv (suc x) zero = refl
neg-inv (suc x) (suc y) = neg-inv x y

open import Path.Reasoning

add-inv : ‚àÄ x y ‚Üí (x +‚ü®‚ü©+ y) ‚â° invert (invert y +‚ü®‚ü©+ invert x)
add-inv (xl ‚ü©‚ü® xr) (yl ‚ü©‚ü® yr) = cong‚ÇÇ _‚ü©‚ü®_ (cong (_+ xl) (cong left (neg-inv xr yl))) (cong (_+ yr) (cong right (neg-inv xr yl)))

0+‚ü®‚ü© : ‚àÄ x ‚Üí mempty +‚ü®‚ü©+ x ‚â° x
0+‚ü®‚ü© (zero   ‚ü©‚ü® xr) i = zero ‚ü©‚ü® xr
0+‚ü®‚ü© (suc xl ‚ü©‚ü® xr) i = suc (‚Ñï.+-id ≥ xl i) ‚ü©‚ü® xr

‚ü®‚ü©+0 : ‚àÄ x ‚Üí x +‚ü®‚ü©+ mempty ‚â° x
‚ü®‚ü©+0 (xl ‚ü©‚ü® zero  ) i = xl ‚ü©‚ü® zero
‚ü®‚ü©+0 (xl ‚ü©‚ü® suc xr) i = xl ‚ü©‚ü® suc (‚Ñï.+-id ≥ xr i)


‚ü®‚ü©-assoc : Associative _+‚ü®‚ü©+_
‚ü®‚ü©-assoc (xl ‚ü©‚ü® xr    ) (zero   ‚ü©‚ü® zero  ) (zl     ‚ü©‚ü® zr) = cong‚ÇÇ _+‚ü®‚ü©+_ (‚ü®‚ü©+0 (xl ‚ü©‚ü® xr)) (sym (0+‚ü®‚ü© (zl ‚ü©‚ü® zr)))
‚ü®‚ü©-assoc (xl ‚ü©‚ü® zero  ) (yl     ‚ü©‚ü® yr    ) (zl     ‚ü©‚ü® zr) = cong (_‚ü©‚ü® (left (yr ‚ü©-‚ü® zl) + zr)) (sym (‚Ñï.+-assoc (right (yr ‚ü©-‚ü® zl)) yl xl))
‚ü®‚ü©-assoc (xl ‚ü©‚ü® suc xr) (yl     ‚ü©‚ü® yr    ) (zl     ‚ü©‚ü® zr) = {!!}

-- ‚ü®‚ü©-assoc (xl ‚ü©‚ü® suc xr) (zero   ‚ü©‚ü® suc yr) (zero   ‚ü©‚ü® zr) = cong (xl ‚ü©‚ü®_) (cong suc (‚Ñï.+-assoc xr (suc yr) zr))
-- ‚ü®‚ü©-assoc (xl ‚ü©‚ü® suc xr) (zero   ‚ü©‚ü® suc yr) (suc zl ‚ü©‚ü® zr) = cong‚ÇÇ _‚ü©‚ü®_ lhs rhs
--   where
--   lhs : right (xr + suc yr ‚ü©-‚ü® zl) + xl ‚â° right (suc xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl) + 0) + xl
--   lhs =
--     right (xr + suc yr ‚ü©-‚ü® zl) + xl ‚â°‚ü® {!!} ‚ü©
--     right (suc xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl)) + xl ‚â°Àò‚ü® cong (Œª pz ‚Üí right (suc xr ‚ü©-‚ü® pz) + xl) (‚Ñï.+-id ≥ (right (yr ‚ü©-‚ü® zl))) ‚ü©
--     right (suc xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl) + 0) + xl ‚àé

--   rhs : left (xr + suc yr ‚ü©-‚ü® zl) + zr ‚â° left (suc xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl) + 0) + (left (yr ‚ü©-‚ü® zl) + zr)
--   rhs =
--     left (xr + suc yr ‚ü©-‚ü® zl) + zr ‚â°‚ü® {!!} ‚ü©
--     left (suc xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl)) + (left (yr ‚ü©-‚ü® zl) + zr) ‚â°Àò‚ü® cong (Œª pz ‚Üí left (suc xr ‚ü©-‚ü® pz) + (left (yr ‚ü©-‚ü® zl) + zr)) (‚Ñï.+-id ≥ (right (yr ‚ü©-‚ü® zl))) ‚ü©
--     left (suc xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl) + 0) + (left (yr ‚ü©-‚ü® zl) + zr) ‚àé

-- ‚ü®‚ü©-assoc (xl ‚ü©‚ü® suc xr) (suc yl ‚ü©‚ü® zero  ) (zero   ‚ü©‚ü® zr) = cong‚ÇÇ _‚ü©‚ü®_ lhs rhs
--   where
--   lhs : right (left (xr ‚ü©-‚ü® yl) + 0 ‚ü©-‚ü® 0) + (right (xr ‚ü©-‚ü® yl) + xl) ‚â° right (xr ‚ü©-‚ü® yl) + xl
--   lhs = cong (_+ (right (xr ‚ü©-‚ü® yl) + xl)) (cong right (diff-zero ≥ (left (xr ‚ü©-‚ü® yl) + 0)))

--   rhs : left (left (xr ‚ü©-‚ü® yl) + 0 ‚ü©-‚ü® 0) + zr ‚â° left (xr ‚ü©-‚ü® yl) + zr
--   rhs = cong (_+ zr) (cong left (diff-zero ≥ (left (xr ‚ü©-‚ü® yl) + 0)) Õæ ‚Ñï.+-id ≥ (left (xr ‚ü©-‚ü® yl)))

-- ‚ü®‚ü©-assoc (xl ‚ü©‚ü® suc xr) (suc yl ‚ü©‚ü® zero  ) (suc zl ‚ü©‚ü® zr) = cong‚ÇÇ _‚ü©‚ü®_ lhs rhs
--   where
--   lhs : right (left (xr ‚ü©-‚ü® yl) + 0 ‚ü©-‚ü® suc zl) + (right (xr ‚ü©-‚ü® yl) + xl) ‚â° right (xr ‚ü©-‚ü® zl + suc yl) + xl
--   lhs = {!!}

--   rhs : left (left (xr ‚ü©-‚ü® yl) + 0 ‚ü©-‚ü® suc zl) + zr ‚â° left (xr ‚ü©-‚ü® zl + suc yl) + zr
--   rhs = {!!}

-- ‚ü®‚ü©-assoc (xl ‚ü©‚ü® suc xr) (suc yl ‚ü©‚ü® suc yr) (zero   ‚ü©‚ü® zr) = cong‚ÇÇ _‚ü©‚ü®_ lhs rhs
--   where
--   lhs : right (left (xr ‚ü©-‚ü® yl) + suc yr ‚ü©-‚ü® 0) + (right (xr ‚ü©-‚ü® yl) + xl) ‚â° right (xr ‚ü©-‚ü® yl) + xl
--   lhs = {!!}

--   rhs : left (left (xr ‚ü©-‚ü® yl) + suc yr ‚ü©-‚ü® 0) + zr ‚â° left (xr ‚ü©-‚ü® yl) + suc (yr + zr)
--   rhs = {!!}

-- ‚ü®‚ü©-assoc (xl ‚ü©‚ü® suc xr) (suc yl ‚ü©‚ü® suc yr) (suc zl ‚ü©‚ü® zr) = cong‚ÇÇ _‚ü©‚ü®_ lhs rhs
--   where
--   lhs : right (left (xr ‚ü©-‚ü® yl) + suc yr ‚ü©-‚ü® suc zl) + (right (xr ‚ü©-‚ü® yl) + xl) ‚â° right (suc xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl) + suc yl) + xl
--   lhs = {!!}

--   rhs : left (left (xr ‚ü©-‚ü® yl) + suc yr ‚ü©-‚ü® suc zl) + zr ‚â° left (suc xr ‚ü©-‚ü® right (yr ‚ü©-‚ü® zl) + suc yl) + (left (yr ‚ü©-‚ü® zl) + zr)
--   rhs = {!!}

-- semigroupBal : Semigroup _
-- semigroupBal .Semigroup.ùëÜ = Bal
-- semigroupBal .Semigroup._‚àô_ = _+‚ü®‚ü©+_
-- semigroupBal .Semigroup.assoc = {!!}
