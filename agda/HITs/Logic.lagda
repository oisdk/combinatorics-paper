\begin{code}
{-# OPTIONS --cubical --safe --postfix-projections #-}

module HITs.Logic where

open import Prelude hiding (‚ä§; ‚ä•)
open import Data.Unit.UniversePolymorphic
open import Data.Empty.UniversePolymorphic
open import Cubical.Foundations.HLevels
open import Algebra
open import HITs.PropositionalTruncation.Sugar

infixl 7 _‚àß_
_‚àß_ : Type a ‚Üí Type b ‚Üí Type (a ‚Ñì‚äî b)
x ‚àß y = x √ó y

infixl 6 _‚à®_
_‚à®_ : Type a ‚Üí Type b ‚Üí Type (a ‚Ñì‚äî b)
x ‚à® y = x ‚äé y

True : Type a
True = ‚ä§

False : Type a
False = ‚ä•

‚à®-assoc : ‚àÄ {xs ys zs : Type a} ‚Üí ((xs ‚à® ys) ‚à® zs) ‚áî (xs ‚à® (ys ‚à® zs))
‚à®-assoc .fun (inl (inl x)) = inl x
‚à®-assoc .fun (inl (inr x)) = inr (inl x)
‚à®-assoc .fun (inr x) = inr (inr x)
‚à®-assoc .inv (inl x) = inl (inl x)
‚à®-assoc .inv (inr (inl x)) = inl (inr x)
‚à®-assoc .inv (inr (inr x)) = inr x
‚à®-assoc .rightInv (inl x) i = inl x
‚à®-assoc .rightInv (inr (inl x)) i = inr (inl x)
‚à®-assoc .rightInv (inr (inr x)) i = inr (inr x)
‚à®-assoc .leftInv (inl (inl x)) i = inl (inl x)
‚à®-assoc .leftInv (inl (inr x)) i = inl (inr x)
‚à®-assoc .leftInv (inr x) i = inr x

‚àß-assoc : ‚àÄ {xs ys zs : Type a} ‚Üí ((xs ‚àß ys) ‚àß zs) ‚áî (xs ‚àß (ys ‚àß zs))
‚àß-assoc .fun ((x , y) , z) = x , (y , z)
‚àß-assoc .inv (x , (y , z)) = (x , y) , z
‚àß-assoc .rightInv x i = x
‚àß-assoc .leftInv x i = x

False‚à® : ‚àÄ {x : Type a} ‚Üí False {a} ‚à® x ‚áî x
False‚à® .fun (inr x) = x
False‚à® .inv = inr
False‚à® .rightInv x i = x
False‚à® .leftInv (inr x) i = inr x

‚à®False : ‚àÄ {x : Type a} ‚Üí x ‚à® False {a} ‚áî x
‚à®False .fun (inl x) = x
‚à®False .inv = inl
‚à®False .rightInv x i = x
‚à®False .leftInv (inl x) i = inl x

True‚àß : ‚àÄ {x : Type a} ‚Üí True {a} ‚àß x ‚áî x
True‚àß .fun = snd
True‚àß .inv = tt ,_
True‚àß .rightInv x _ = x
True‚àß .leftInv x _ = x

‚àßTrue : ‚àÄ {x : Type a} ‚Üí x ‚àß True {a} ‚áî x
‚àßTrue .fun = fst
‚àßTrue .inv = _, tt
‚àßTrue .rightInv x _ = x
‚àßTrue .leftInv x _ = x

False‚àß : ‚àÄ {x : Type a} ‚Üí False {a} ‚àß x ‚áî False {a}
False‚àß .fun ()
False‚àß .inv ()
False‚àß .rightInv ()
False‚àß .leftInv ()

‚à®‚àß : ‚àÄ {x y z : Type a} ‚Üí (x ‚à® y) ‚àß z ‚áî x ‚àß z ‚à® y ‚àß z
‚à®‚àß .fun (inl x , z) = inl (x , z)
‚à®‚àß .fun (inr y , z) = inr (y , z)
‚à®‚àß .inv (inl (x , z)) = inl x , z
‚à®‚àß .inv (inr (y , z)) = inr y , z
‚à®‚àß .rightInv (inl x) = refl
‚à®‚àß .rightInv (inr x) = refl
‚à®‚àß .leftInv (inl x , z) = refl
‚à®‚àß .leftInv (inr x , z) = refl

‚à®-comm : ‚àÄ {x y : Type a} ‚Üí x ‚à® y ‚áî y ‚à® x
‚à®-comm .fun (inl x) = inr x
‚à®-comm .fun (inr x) = inl x
‚à®-comm .inv (inl x) = inr x
‚à®-comm .inv (inr x) = inl x
‚à®-comm .rightInv (inl x) = refl
‚à®-comm .rightInv (inr x) = refl
‚à®-comm .leftInv (inl x) = refl
‚à®-comm .leftInv (inr x) = refl

‚àßFalse : ‚àÄ {x : Type a} ‚Üí x ‚àß False {a} ‚áî False {a}
‚àßFalse .fun ()
‚àßFalse .inv ()
‚àßFalse .rightInv ()
‚àßFalse .leftInv ()

‚àß‚à® : ‚àÄ {x y z : Type a} ‚Üí x ‚àß (y ‚à® z) ‚áî x ‚àß y ‚à® x ‚àß z
‚àß‚à® .fun (x , inl y) = inl (x , y)
‚àß‚à® .fun (x , inr z) = inr (x , z)
‚àß‚à® .inv (inl (x , y)) = x , inl y
‚àß‚à® .inv (inr (x , z)) = x , inr z
‚àß‚à® .rightInv (inl x) = refl
‚àß‚à® .rightInv (inr x) = refl
‚àß‚à® .leftInv (fst‚ÇÅ , inl x) = refl
‚àß‚à® .leftInv (fst‚ÇÅ , inr x) = refl

‚àß-comm : ‚àÄ {x y : Type a} ‚Üí x ‚àß y ‚áî y ‚àß x
‚àß-comm .fun (x , y) = (y , x)
‚àß-comm .inv (y , x) = (x , y)
‚àß-comm .rightInv _ = refl
‚àß-comm .leftInv _ = refl

open CommutativeSemiring
open Semiring
open NearSemiring

tySemiring : CommutativeSemiring (‚Ñì-suc a)
tySemiring {a} .semiring .nearSemiring .ùëÖ = Type a
tySemiring {a} .semiring .nearSemiring ._+_ = _‚à®_
tySemiring {a} .semiring .nearSemiring ._*_ = _‚àß_
tySemiring {a} .semiring .nearSemiring .1# = True
tySemiring {a} .semiring .nearSemiring .0# = False
tySemiring {a} .semiring .nearSemiring .+-assoc _ _ _ = isoToPath ‚à®-assoc
tySemiring {a} .semiring .nearSemiring .*-assoc _ _ _ = isoToPath ‚àß-assoc
tySemiring {a} .semiring .nearSemiring .0+ _ = isoToPath False‚à®
tySemiring {a} .semiring .nearSemiring .+0 _ = isoToPath ‚à®False
tySemiring {a} .semiring .nearSemiring .1* _ = isoToPath True‚àß
tySemiring {a} .semiring .nearSemiring .*1 _ = isoToPath ‚àßTrue
tySemiring {a} .semiring .nearSemiring .0* _ = isoToPath False‚àß
tySemiring {a} .semiring .nearSemiring .‚ü®+‚ü©* _ _ _ = isoToPath ‚à®‚àß
tySemiring {a} .semiring .+-comm _ _ = isoToPath ‚à®-comm
tySemiring {a} .semiring .*0 _ = isoToPath ‚àßFalse
tySemiring {a} .semiring .*‚ü®+‚ü© _ _ _ = isoToPath ‚àß‚à®
tySemiring {a} .*-comm _ _ = isoToPath ‚àß-comm

open StarSemiring
open import Data.List using (List; _‚à∑_; [])

list-iter ≥ : ‚àÄ {x : Type a} ‚Üí List x ‚áî True {a} ‚à® x ‚àß List x
list-iter ≥ .fun [] = inl tt
list-iter ≥ .fun (x ‚à∑ xs) = inr (x , xs)
list-iter ≥ .inv (inl x) = []
list-iter ≥ .inv (inr (x , xs)) = x ‚à∑ xs
list-iter ≥ .rightInv (inl x) = refl
list-iter ≥ .rightInv (inr x) = refl
list-iter ≥ .leftInv [] = refl
list-iter ≥ .leftInv (x ‚à∑ x‚ÇÅ) = refl

list-iterÀ° : ‚àÄ {x : Type a} ‚Üí List x ‚áî True {a} ‚à® List x ‚àß x
list-iterÀ° .fun [] = inl tt
list-iterÀ° .fun (x ‚à∑ xs) = inr (xs , x)
list-iterÀ° .inv (inl x) = []
list-iterÀ° .inv (inr (xs , x)) = x ‚à∑ xs
list-iterÀ° .rightInv (inl x) = refl
list-iterÀ° .rightInv (inr x) = refl
list-iterÀ° .leftInv [] = refl
list-iterÀ° .leftInv (x ‚à∑ x‚ÇÅ) = refl

tyStar : StarSemiring (‚Ñì-suc a)
tyStar .semiring = tySemiring .semiring
tyStar ‚ãÜ = List
tyStar .star-iter ≥ _ = isoToPath list-iter ≥
tyStar .star-iterÀ° _ = isoToPath list-iterÀ°
\end{code}
